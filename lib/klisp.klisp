; core library

(def and &)
(def or |)
(def xor ^)
(def not
	 (fn (x)
		 (if x false true)))
(def ! not)

; type assertions
(def number?
	 (fn (x) (= (type x) 'number')))
(def boolean?
	 (fn (x) (= (type x) 'boolean')))
(def string?
	 (fn (x) (= (type x) 'string')))
(def function?
	 (fn (x) (= (type x) 'function')))
(def list?
	 (fn (x) (= (type x) 'composite')))

; identity
(def id
	 (fn (x) x))

; basic math
(def !=
	 (fn (a b) (! (= a b))))
(def >=
	 (fn (a b) (! (< a b))))
(def <=
	 (fn (a b) (! (> a b))))
(def inc
	 (fn (n) (+ n 1)))
(def dec
	 (fn (n) (- n 1)))

; list methods
(def list
	 (macro (items)
			(cons (quote quote)
				  (cons items ()))))

(def append
	 (fn (xs el)
		 (if (= xs ())
		   (cons el ())
		   (cons (car xs)
				 (append (cdr xs) el)))))

(def range
	 (fn (start end step)
		 (do
		   (def sub
				(fn (i acc)
					(if (< i end)
					  (sub (+ i step)
						   (append acc i))
					  acc)))
		   (sub start (list)))))

(def map
	 (fn (list f)
		 (if (= list ())
		   ()
		   (cons (f (car list))
				 (map (cdr list) f)))))

(def reduce
	 (fn (list f acc)
		 (if (= list ())
		   acc
		   (reduce (cdr list) f (f acc (car list))))))

(def size
	 (fn (xs)
		 (if (= xs ())
		   0
		   (+ 1 (size (cdr xs))))))

