; core library

; aliases
(def and &)
(def or |)
(def xor ^)
(def not
     (fn (x)
         (if x false true)))
(def ! not)

; cons cell shorthands
(def caar
     (fn (x) (car (car x))))
(def cadr
     (fn (x) (car (cdr x))))
(def cdar
     (fn (x) (cdr (car x))))
(def cddr
     (fn (x) (cdr (cdr x))))

; type assertions
(def nil?
     (fn (x) (= x ())))
(def zero?
     (fn (x) (= x 0)))
(def number?
     (fn (x) (= (type x) 'number')))
(def boolean?
     (fn (x) (= (type x) 'boolean')))
(def string?
     (fn (x) (= (type x) 'string')))
(def symbol?
     (fn (x) (= (type x) 'symbol')))
(def function?
     (fn (x) (= (type x) 'function')))
(def list?
     (fn (x) (= (type x) 'list')))
(def pair?
     (fn (x)
         (if (list? x)
           (= (size x) 2)
           false)))

; identity
(def id
     (fn (x) x))

; basic math
(def neg
     (fn (n) (- 0 n)))
(def neg?
     (fn (n) (< n 0)))
(def abs
     (fn (n)
         (if (neg? n)
           (neg n)
           n)))
(def sign
     (fn (n)
         (if (neg? n)
           (neg 1)
           1)))
(def sqrt
     (fn (n) (# n 0.5)))
(def even?
     (fn (n) (zero? (% n 2))))
(def odd?
     (fn (n) (! (even? n))))
(def !=
     (fn (a b) (! (= a b))))
(def >=
     (fn (a b) (! (< a b))))
(def <=
     (fn (a b) (! (> a b))))
(def inc
     (fn (n) (+ n 1)))
(def dec
     (fn (n) (- n 1)))
(def sum
     (fn (ns) (reduce ns + 0)))
(def prod
     (fn (ns) (reduce ns * 1)))
(def times
     ; repeat x, n times in a list
     (fn (n x)
         (map (range 0 n 1)
              (fn () x))))

; macros
(def when
     (macro (terms)
            (list ,if (car terms) (cadr terms) ())))

(def unless
     (macro (terms)
            (list ,if (car terms) () (cadr terms))))

(def let
     (macro (terms)
            (do
              (def decl (car terms))
              (def declname (car decl))
              (def declval (cadr decl))
              (def body (cadr terms))
              (list
                (list ,fn (list declname) body)
                declval))))

(def list
     (macro (items)
            ((def -list
                  (fn (items)
                      (if (nil? items)
                        ()
                        (cons ,cons
                              (cons (car items)
                                    (cons (-list (cdr items))
                                          ()))))))
             items)))

(def quasiquote
     (macro (terms)
            (cons
              ,list
              (map (car terms)
                   (fn (term)
                       (if (list? term)
                         (if (= ,unquote (car term))
                           (cadr term)
                           (list ,quasiquote term))
                         (list ,quote term)))))))

(def do-times
     (macro (terms)
            (cons ,do
                  (times (car terms) (list (cadr terms))))))

; (while condition . body)
(def while
     (macro (terms)
            (do
              (def cndn (car terms))
              (def body (cdr terms))
              (quasiquote
                ((def -while-f
                      (fn ()
                          (if (unquote cndn)
                            (do
                              (unquote (cons ,do body))
                              (-while-f))
                            ()))))))))

; shorthand for defining functions in scope
(def defn
     (macro (terms)
            (quasiquote
              (def (unquote (car terms))
                   (fn (unquote (cadr terms))
                       (unquote (car (cddr terms))))))))

; (cond (pred body) (pred body))
(def cond
     (macro (terms)
            ((def -cond
                  (fn (terms)
                      (if (nil? terms)
                        ()
                        (quasiquote
                          (if (unquote (car (car terms)))
                            (unquote (cadr (car terms)))
                            (unquote (-cond (cdr terms))))))))
             terms)))

; (match val (tag body) (tag body))
(def match
     (macro (terms)
            (do
              (def -match
                   (fn (terms)
                       (if (nil? terms)
                         ()
                         (quasiquote
                           (if (= -match-val (unquote (car (car terms))))
                             (unquote (cadr (car terms)))
                             (unquote (-match (cdr terms))))))))
              (quasiquote
                (let (-match-val (unquote (car terms)))
                  (unquote (-match (cdr terms))))))))

; thread-first
(def ->
     (macro (terms)
            (do
              (def apply-partials
                   (fn (partials expr)
                       (if (nil? partials)
                         expr
                         (if (symbol? (car partials))
                           (list (car partials)
                                 (apply-partials (cdr partials) expr))
                           (cons (caar partials)
                                 (cons (apply-partials (cdr partials) expr)
                                       (cdar partials)))))))
              (apply-partials (reverse (cdr terms))
                              (car terms)))))

; thread-last
(def ->>
     (macro (terms)
            (do
              (def apply-partials
                   (fn (partials expr)
                       (if (nil? partials)
                         expr
                         (if (symbol? (car partials))
                           (list (car partials)
                                 (apply-partials (cdr partials) expr))
                           (append (car partials)
                                   (apply-partials (cdr partials) expr))))))
              (apply-partials (reverse (cdr terms))
                              (car terms)))))

; partial application
(def partial
     (macro (terms)
            (list ,fn
                  ,(-partial-arg)
                  (map (car terms)
                       (fn (x)
                           (if (= x ,_) ,-partial-arg x))))))

; list methods
(def nth
     (fn (xs i)
         (if (zero? i)
           (car xs)
           (nth (cdr xs) (dec i)))))

(def nth?
     (fn (xs i x)
         (if (zero? i)
           (= (car xs) x)
           (nth? (cdr xs) (dec i) x))))

(def index
     (fn (xs x)
         (do
           (def index-from
                (fn (xs x rest)
                    (if (= (car xs) x)
                      rest
                      (index-from (cdr xs) x (inc rest)))))
           (index-from xs x 0))))

(def find
     (fn (xs f?)
         (if (nil? xs)
           ()
           (if (f? (car xs))
             (car xs)
             (find (cdr xs) f?)))))

(def some?
     (fn (xs)
         (if (nil? xs)
           false
           (if (car xs)
             true
             (some? (cdr xs))))))

(def every?
     (fn (xs)
         (if (nil? xs)
           true
           (if (car xs)
             (every? (cdr xs))
             false))))

(def min
     (fn (xs)
         (if (nil? xs)
           ()
           (reduce xs
                   (fn (a b)
                       (if (< a b) a b))
                   (car xs)))))

(def max
     (fn (xs)
         (if (nil? xs)
           ()
           (reduce xs
                   (fn (a b)
                       (if (< a b) b a))
                   (car xs)))))

(def contains?
     (fn (xs x)
         (< 0 (index xs x))))

; O(n^2) behavior with linked lists
(def append
     (fn (xs el)
         (if (nil? xs)
           (list el)
           (cons (car xs)
                 (append (cdr xs) el)))))

(def join
     (fn (xs ys)
         (if (nil? xs)
           ys
           (cons (car xs)
                 (if (nil? (cdr xs))
                   ys
                   (join (cdr xs) ys))))))

(def range
     (fn (start end step)
         ; intentionally avoiding then when macro for efficiency
         (if (< start end)
           (cons start
                 (range (+ start step) end step))
           ())))

(def seq
     (fn (n) (range 0 n 1)))

(def nat
     (fn (n) (range 1 (inc n) 1)))

(def reverse
     (fn (x)
         (if (nil? x)
           x
           (append (reverse (cdr x))
                   (car x)))))

(def map
     (fn (xs f)
         (if (nil? xs)
           ()
           (cons (f (car xs))
                 (map (cdr xs) f)))))

(def map-deep
     (fn (xs f)
         (map xs (fn (x)
                     (if (list? x)
                       (map-deep x f)
                       (f x))))))

(def reduce
     (fn (xs f acc)
         (if (nil? xs)
           acc
           (reduce (cdr xs) f (f acc (car xs))))))

(def filter
     (fn (xs f)
         (if (nil? xs)
           ()
           (if (f (car xs))
             (cons (car xs)
                   (filter (cdr xs) f))
             (filter (cdr xs) f)))))

(def each
     (fn (xs f)
         (if (nil? xs)
           ()
           (do
             (f (car xs))
             (each (cdr xs) f)))))

(def size
     (fn (xs)
         (if (nil? xs)
           0
           (inc (size (cdr xs))))))

(def zip-with
     (fn (xs ys f)
         (if (| (nil? xs) (nil? ys))
           ()
           (cons (f (car xs) (car ys))
                 (zip-with (cdr xs) (cdr ys) f)))))

(def zip
     (fn (xs ys)
         (zip-with xs ys list)))

(def take
     (fn (xs n)
         (if (zero? n)
           ()
           (cons (car xs)
                 (take (cdr xs) (dec n))))))

(def flatten
     (fn (xs)
         (reduce xs join ())))

; TODO: sort

; utilities
(def println
     (macro (terms)
            ; we expand the macro manually here
            ; because println should be as fast as possible
            (cons ,do
                  (cons (cons ,print terms)
                        (cons ,(print (char 10))
                              ())))))

(def comment
     ; add "(comment val)" to an expr head
     ; to substitute the expr with "val"
     (macro (terms) (car terms)))

(def log-runtime
     ; prints runtime (finish - start) of an expression
     (macro (terms)
            (quasiquote
              (do
                (def start (time))
                (def -val (unquote (cadr terms)))
                (println (+ 'Runtime for ' (unquote (car terms)) ':')
                         (number->string (* 1000 (- (time) start)))
                         'ms')
                -val))))

